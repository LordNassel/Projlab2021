package game_logic;

import java.util.*;


/**
 * Ez az osztály felelsõs a játékmenet elvárt futásáért.Elkezdi/befejezi az adott játszmát,
 * betölt egy pályát illetve kezeli a körökre osztást is
 */
public class Game {

	/**
	 * Statikus boolean ami igaz ha a játék éppen fut. Hamis ha befejezõdött
	 */
	private static boolean running;
	/**
	 * Az aktuális pálya, amin játszunk
	 */
	private Map map;
	/**
	 * Steppable, vagyis a mozgásra képes objektumok listája
	 */
	private static ArrayList<Steppable> steppableList = new ArrayList<Steppable>();

    /**
     * Default constructor
     */
    public Game() {
    	map = new Map();
    	running = true;
    }
    
    /**
     * Paraméterként átadott pályát tölt be
     */
    public Game(Map generatedmap) {
    	map = generatedmap;
    	running = true;
    }

    /**
     * Ha a játékosok teljesítették az elõírtakat,akkor megnyerték a játékot,
     * és a running-ot false-ra állítja
     */
    public static void Wingame() {
    	System.out.println("Wingame called");
    	running=false;
    }

    /**
     * A játékosok vesztettek, a játéknakvége,
     * és a running-ot false-re állítja
     */
    public void Losegame() {
    	running = false;
    	System.out.println("Losegame called");

        
    }

   /**
    * Elindítja a körökre osztott játékmenetet,
    * lépteti a léptethetõ objektumokat. Ha minden telepes halott
    * akkor befejezi a játékot
    */
    public void StartGame() {
    	System.out.println("A jatek elkezdodott, jo szorakozast!");
    	int number = 1;
    	while(running)
    	{
    		System.out.println("\nA " + number + ". kor elkezdodott");
    		for(int i= 0; i<steppableList.size(); i++)
    		{
    			if(getIsTherAnySettler()==false)
    			{
    				Losegame();
    				return;
    			}
    			steppableList.get(i).Step();
    		}
    		number++;
    	}
    }

    /**
     * Egy új mozgó objektumotadunk hozzá a játéktérhez
     */
    public void AddMovable(Movable Playable, Asteroid a) {
    	Playable.SetCurrentField(a);
    	a.AcceptPlayer(Playable);
    	AddSteppable(Playable);
    	
    }
    
    /**
     * Léptethetõ objektumok listájába újat ad hozzá
     */
    public static void AddSteppable(Steppable s)
    {
    	steppableList.add(s);
    }
    
    /**
     * Léptethetõ objektumok listájából töröl egy paraméterül kapottat
     */
    public static void RemoveSteppable(Steppable s)
    {
    	steppableList.remove(s);
    }
    
    /**
     * Segédfüggvény annak az ellenõrzésére, hogy van-e játékban még Telepes
     */
    public boolean getIsTherAnySettler()
	{
    	Asteroid a = new Asteroid("bela");
    	Settler s = new Settler("Palyer", a);
		int number = 0;
		for(int i = 0; i<steppableList.size(); i++)
		{
			if(steppableList.get(i).getClass().equals( s.getClass()))
				number++;
		}
		if(number==0)
			return false;
		return true;
	}

}